VSCODE DEBUGGING
9/2020

Sample .vscode/launch.json config 
- Seems like VSCode has improved considerably over the last 2-3 years. Configs have gotten simpler and generally just work. 
- These configs work. I tested with breakpoints for both running a Webpack dev server and also with Jest tests 
- (Important - you need to stop the process in the terminal. Stopping the debugger isn't sufficient)
    // npm run XXXX 
    {
      "name": "npm run XXXX",
      "type": "node",
      "request": "launch",
      "runtimeExecutable": "npm",
      "runtimeArgs": ["run-script", "XXXX"],
      "console": "integratedTerminal",
    }

    // node foo/bar.js
    {
      "name": "XXXX",
      "type": "node",
      "request": "launch",
      "program": "./foo/bar.js",
      "args": ["--args", "--if", "-u", "--need", "--them"],
      "console": "integratedTerminal",
    }


- Options
  - program vs runtimeExecutable
    - program - a script run with Node 
    - runtimeExecutable - something available on the path (e.g. npm)
  - runtimeVersion
    - If you use nvm or similar, VSCode will use it get the version of Node specified
  - "console": "integratedTerminal"
    - This setting is super useful/important
    - If a program needs user input (e.g. Jest) or colored output, the default debugger window won't work 
    - This setting runs the output in the terminal 
    - Important - you need to stop the process in the terminal. Stopping the debugger isn't sufficient 
  - env
    - VSCode will pick up your .env file and/or override it with your config's env field 
  - Remote dubugging 
    - Useful if in Docker 
  - Restart frame
    - You can right-click on on a recent function in the "Call Stack" pannel, and click "Restart Frame" to replay a recent method 
